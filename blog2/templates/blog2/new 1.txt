void cubeSphereTransformation()
{
    if(sideCube > 30){
        sideCube = 30;
    }
    if(sideCube < 0){
        sideCube = 0;
    }

    glPushMatrix();{
        glTranslatef(sideCube,0,0);
        glRotatef(90,0,1,0);
        //glTranslatef(-10,10,10);
        drawSquare(sideCube);
    }glPopMatrix();

    glPushMatrix();{
        glTranslatef(-sideCube,0,0);
        glRotatef(-90,0,1,0);
        //glTranslatef(-10,10,10);
        drawSquare(sideCube);
    }glPopMatrix();

    glPushMatrix();{
        glTranslatef(0,0,sideCube);
        //glRotatef(90,0,1,0);
        //glTranslatef(-10,10,10);
        drawSquare(sideCube);
    }glPopMatrix();

    glPushMatrix();{
        glTranslatef(0,0,-sideCube);
        //glRotatef(90,1,0,0);
        //glTranslatef(-10,10,10);
        drawSquare(sideCube);
    }glPopMatrix();


    glPushMatrix();{
        glTranslatef(0,sideCube,0);
        glRotatef(90,1,0,0);
        //glTranslatef(-10,10,10);
        drawSquare(sideCube);
    }glPopMatrix();

    glPushMatrix();{
        glTranslatef(0,-sideCube,0);
        glRotatef(90,1,0,0);
        //glTranslatef(-10,10,10);
        drawSquare(sideCube);
    }glPopMatrix();



    glPushMatrix();{
    glTranslatef(sideCube,sideCube,sideCube);
    drawSphere(30-sideCube,15,10);
    }glPopMatrix();

    glPushMatrix();{
    glTranslatef(-sideCube,sideCube,sideCube);
    glRotatef(90,0,0,1);
    drawSphere(30-sideCube,15,10);
    }glPopMatrix();

    glPushMatrix();{
    glTranslatef(-sideCube,-sideCube,sideCube);
    glRotatef(180,0,0,1);
    drawSphere(30-sideCube,15,10);
    }glPopMatrix();

    glPushMatrix();{
    glTranslatef(sideCube,-sideCube,sideCube);
    glRotatef(270,0,0,1);
    drawSphere(30-sideCube,15,10);
    }glPopMatrix();

    glPushMatrix();{
    glTranslatef(sideCube,-sideCube,-sideCube);
    glRotatef(180,1,0,0);
    drawSphere(30-sideCube,15,10);
    }glPopMatrix();

    glPushMatrix();{
    glTranslatef(-sideCube,-sideCube,-sideCube);
    glRotatef(180,1,0,0);
    glRotatef(90,0,0,1);
    drawSphere(30-sideCube,15,10);
    }glPopMatrix();

    glPushMatrix();{
    glTranslatef(-sideCube,sideCube,-sideCube);
    glRotatef(180,1,0,0);
    glRotatef(180,0,0,1);
    drawSphere(30-sideCube,15,10);
    }glPopMatrix();

    glPushMatrix();{
    glTranslatef(sideCube,sideCube,-sideCube);
    glRotatef(180,1,0,0);
    glRotatef(270,0,0,1);
    drawSphere(30-sideCube,15,10);
    }glPopMatrix();


    glPushMatrix();{
    glTranslatef(sideCube,sideCube,-sideCube);
    drawCylinder(30-sideCube,sideCube*2);
	glTranslatef(sideCube,sideCube,0);
	}glPopMatrix();

    glPushMatrix();{
    glTranslatef(-sideCube,sideCube,-sideCube);
	glRotatef(90,0,0,1);
	drawCylinder(30-sideCube,sideCube*2);
    }glPopMatrix();

    glPushMatrix();{
    glTranslatef(-sideCube,-sideCube,-sideCube);
	glRotatef(180,0,0,1);
	drawCylinder(30-sideCube,sideCube*2);
    }glPopMatrix();

    glPushMatrix();{
    glTranslatef(sideCube,-sideCube,-sideCube);
	glRotatef(270,0,0,1);
	drawCylinder(30-sideCube,sideCube*2);
    }glPopMatrix();

    glPushMatrix();{
    glTranslatef(sideCube,sideCube,sideCube);
	glRotatef(90,1,0,0);
	drawCylinder(30-sideCube,sideCube*2);
    }glPopMatrix();

    glPushMatrix();{
    glTranslatef(sideCube,-sideCube,-sideCube);
	glRotatef(270,1,0,0);
	drawCylinder(30-sideCube,sideCube*2);
    }glPopMatrix();

    glPushMatrix();{
    glTranslatef(sideCube,sideCube,sideCube);
	glRotatef(270,0,1,0);
	drawCylinder(30-sideCube,sideCube*2);
    }glPopMatrix();

    glPushMatrix();{
    glTranslatef(-sideCube,sideCube,-sideCube);
	glRotatef(90,0,1,0);
	drawCylinder(30-sideCube,sideCube*2);
    }glPopMatrix();

    glPushMatrix();{
    glTranslatef(-sideCube,-sideCube,sideCube);
	glRotatef(90,0,1,0);
	glRotated(180,0,0,1);
	drawCylinder(30-sideCube,sideCube*2);
    }glPopMatrix();

    glPushMatrix();{
    glTranslatef(-sideCube,-sideCube,-sideCube);
	glRotatef(90,0,1,0);
	glRotated(270,0,0,1);
	drawCylinder(30-sideCube,sideCube*2);
    }glPopMatrix();


    glPushMatrix();{
    glTranslatef(-sideCube,sideCube,sideCube);
    glRotatef(270,0,1,0);
    glRotatef(90,1,0,0);
	drawCylinder(30-sideCube,sideCube*2);
    }glPopMatrix();

    glPushMatrix();{
    glTranslatef(-sideCube,sideCube,-sideCube);
    glRotatef(270,0,1,0);
    glRotatef(90,1,0,0);
    glRotatef(90,0,0,1);
	drawCylinder(30-sideCube,sideCube*2);
    }glPopMatrix();


}